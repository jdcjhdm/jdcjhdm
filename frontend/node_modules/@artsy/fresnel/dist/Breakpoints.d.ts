import { MediaBreakpointProps } from "./Media";
/**
 * A union of possible breakpoint props.
 */
export declare type MediaBreakpointKey = keyof MediaBreakpointProps;
declare type ValueBreakpointPropsTuple<T, B> = [T, MediaBreakpointProps<B>];
export declare enum BreakpointKey {
    at = "at",
    lessThan = "lessThan",
    greaterThan = "greaterThan",
    greaterThanOrEqual = "greaterThanOrEqual",
    between = "between"
}
/**
 * Encapsulates all breakpoint data needed by the Media component. The data is
 * generated on initialization so no further runtime work is necessary.
 */
export declare class Breakpoints<B extends string> {
    static validKeys(): BreakpointKey[];
    private _sortedBreakpoints;
    private _breakpoints;
    private _mediaQueries;
    constructor(breakpoints: {
        [key: string]: number;
    });
    get sortedBreakpoints(): B[];
    get dynamicResponsiveMediaQueries(): {};
    get largestBreakpoint(): string;
    findBreakpointsForWidths: (fromWidth: number, throughWidth: number) => B[] | undefined;
    findBreakpointAtWidth: (width: number) => B | undefined;
    toRuleSets(keys?: BreakpointKey[]): string[];
    shouldRenderMediaQuery(breakpointProps: MediaBreakpointProps, onlyRenderAt: string[]): boolean;
    valuesWithBreakpointProps: <T>(values: T[]) => ValueBreakpointPropsTuple<T, B>[];
    private _normalizeProps;
    private _createBreakpointQuery;
    private _createBreakpointQueries;
    private _findNextBreakpoint;
}
export {};
